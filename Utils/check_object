#!/home/sam/anaconda3/bin/python

# To avoid OpenBLAS error
import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

import os, sys, numpy as np, argparse
from PAOPhot2.db import get_actions_for_object, get_actions_for_field , PAOPhot_paths , get_ticid_from_toi
import glob

# Arg parser
def arg_parse():
    """
    Parse the command line arguments
    """
    p = argparse.ArgumentParser("Check the reduction status of either a field or object.")
    p.add_argument('--field',
                   help='The name of the object to check actions for.',
                   type=str, default='None')
    p.add_argument('--name',
                   help='The name of the object to check actions for.',
                   type=str, default='None')
    p.add_argument('--submit', action="store_true", default=False, help='Submit the SGE job to reduce the action.')
    p.add_argument('--process', action="store_true", default=False, help='Submit the SGE job to reduce the action.')
    p.add_argument('--apstring',
                   help='The name of the object to check actions for.',
                   type=str, default='3')
    p.add_argument('--find_best_aperture', action="store_true", default=False)

    return p.parse_args()



# Main loop
if __name__=="__main__":
    # First, pars the arguments
    args = arg_parse()

    # Now see what needs doing
    if args.field != 'None' : actions = get_actions_for_field(args.field)
    elif args.name != 'None' : actions = get_actions_for_object(args.name)
    else:
        print('Neither field or name specified. exiting.')
        exit()

    # Now convert campaign names to TIC ID
    mask = np.zeros(len(actions), dtype = np.bool)
    for i in range(len(actions)):
            if actions[i]['campaign'][:3] =='TIC':
                    actions[i]['TICID'] = actions[i]['campaign'].split('_')[0].split('-')[1]
                    mask[i] = True
                    print('\tFound {:}'.format(actions[i]['campaign'].split('_')[0]))
            elif actions[i]['campaign'][:3] =='TOI':
                    actions[i]['TICID'] = get_ticid_from_toi(actions[i]['campaign'].split('_')[0].split('-')[1])
                    if actions[i]['TICID']!= -99 : 
                        print('\tFound {:} [TIC-{:}]'.format(actions[i]['campaign'].split('_')[0], actions[i]['TICID']))
                        mask[i] = True
    actions = np.array(actions)[mask]
    print('Found {:,} actions'.format(len(actions)))

    # Now go through each action, see what has been done
    photometry_done = np.ones(len(actions), dtype=np.bool)
    for i in range(len(actions)):
        # first check if it has been done
        photfile = glob.glob('/ngts/staging/archive/PAOPhot2/photometry/action{:}/*{:}_photometry.csv'.format(actions[i]['action_id'],actions[i]['action_id']))
        if len(photfile) ==0 : photometry_done[i] = False

        text = '\t{:} on {:}, campaign {:} with TIC-{:} :   reduced? {:}'.format(actions[i]['action_id'], actions[i]['night'] , actions[i]['campaign'] ,actions[i]['TICID'], photometry_done[i])

        if (args.submit) and not photometry_done[i]:
            action = actions[i] 

            job_file =  '{:}/jobs/PAOPhot_action{:}.sh'.format(PAOPhot_paths['PAOPhot2_data_path'], action['action_id'])
            log_file =  '{:}/logs/PAOPhot_action{:}.log'.format(PAOPhot_paths['PAOPhot2_data_path'], action['action_id'])

            f = open(job_file, 'w+')
            f.write('\n#!/bin/tcsh')
            #f.write('\n#$ -S /bin/tcsh')
            #f.write('\n#$ -M ngtsops@warwick.ac.uk')
            f.write('\n#$ -N PAOPhot_action{:}'.format(action['action_id']))
            f.write('\n#$ -o {:}'.format(log_file))
            f.write('\n#$ -e {:}'.format(log_file))
            #f.write('\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/wcslib/lib')
            f.write('\nexport LD_LIBRARY_PATH=/usr/local/telescope/CSIMC/icc/libc5:/usr/local/telescope/lib::/usr/local/lib:/usr/local/wcslib/lib')
            #$((NSLOTS/2))
            cmd = '/usr/local/anaconda3/bin/reduce_action {:}  --threads 1 --target_ticid {:} --astr_net_tmp $TMPDIR'.format(action['action_id'], action['TICID'])
            f.write('\n\n{:}'.format(cmd))

            f.close()
            os.system('/usr/local/sge/bin/lx-amd64/qsub -p -200 -pe mpi 4-8 {:}'.format(job_file))
            text += ' --> resubmitted'

        if args.process and photometry_done[i]:
            photometry_catalogue = '{:}target_catalogues/TIC-{:}.fits'.format(PAOPhot_paths['PAOPhot2_data_path'], action['TICID'])
            photometry_catalogue_mask = '{:}target_catalogues/TIC-{:}_mask.fits'.format(PAOPhot_paths['PAOPhot2_data_path'], action['TICID'])
            
            # Check catalogue exists 
            if not os.path.isfile(photometry_catalogue_mask):
                print('Catalogue not found, we need to make it.')
                continue 

            # Make the call
            cmd = '/usr/local/anaconda3/bin/postprocess_action {:} {:} --photometery_catalogue_mask {:} --apstring {:}'.format(photometry_catalogue , photfile , photometry_catalogue_mask, args.apstring)
            if args.find_best_aperture : cmd += ' --find_best_aperture'

            print(cmd)
            #os.system(cmd)

        print(text)