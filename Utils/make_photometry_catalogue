#!/home/sam/anaconda3/bin/python

from astropy.table import Table, vstack, Column
from astropy.io import fits 
import numpy as np 
from astropy import units as u
from astropy.coordinates import SkyCoord
import argparse, os, sys
from astropy.wcs import WCS
from scipy.stats import median_absolute_deviation
from tqdm import tqdm 

# Arg parser
def arg_parse():
    """
    Parse the command line arguments
    """
    p = argparse.ArgumentParser("Reduce whole actions.")
    p.add_argument('reference_catalogue',
                   help='The reference catalogue from which to make the photometry catalogue with.',
                   type=str)
    p.add_argument('reference_image',
                   help='Thereference image accompanyin gthe referene_catalogue.',
                   type=str)
    p.add_argument('tic_id',
                   help='The target TIC ID which is the target of photometry.',
                   type=int)
    p.add_argument('--output_dir',
                   help='The output directory.',
                   type=str, default = '.')
    return p.parse_args()


if __name__=='__main__':
    # First, pars the arguments
    args = arg_parse() 
    print('Making target catalogue for TIC-{:}\n\tUsing reference image {:}\n\treference catalogue {:}'.format(args.tic_id, args.reference_image, args.reference_catalogue))

    # Open the frame
    frame = fits.open(args.reference_image)[0]
    frame_wcs = WCS(fits.open(args.reference_image)[0].header, fits.open(args.reference_image))
    reference_catalogue = Table.read(args.reference_catalogue)

    ###############################################################################
    # Find the target row and store it, removing it so we can compare comparisons #
    ###############################################################################
    idx_target = np.where(reference_catalogue['tic_id']==args.tic_id)[0][0]
    target_row = reference_catalogue[idx_target:(idx_target+1)] # hack to get row copy instead of Row object which is by reference
    BPRP = target_row['gaiabp'][0] - target_row['gaiarp'][0]   
    if np.isnan(BPRP) or np.isinf(BPRP) : BPRP = reference_catalogue['gaiabp'] - reference_catalogue['gaiarp'] # so everything passes
    reference_catalogue.remove_row(idx_target) # remove it so we can make comparisons

    ###################################################################################
    # First, lets get all the targets near our target so we can check false-positives #
    ###################################################################################
    x, y = frame_wcs.all_world2pix(reference_catalogue['ra_deg'],reference_catalogue['dec_deg'],0)
    xtarget, ytarget = frame_wcs.all_world2pix(target_row['ra_deg'][0],target_row['dec_deg'][0],0)
    R_dist = np.hypot(x-xtarget, y-ytarget)
    FP_mask = (R_dist < 6.) | ((R_dist < 12.) & ( reference_catalogue['Tmag'] < target_row['Tmag'][0]))
    FP_table = reference_catalogue[FP_mask]

    ###############################################################
    # Cut the reference catalogue based on various metrics
    ###############################################################
    reference_catalogue_mask = (reference_catalogue['on_chip']==1) &\
         (reference_catalogue['blended']==False) &\
         (reference_catalogue['objType']=='STAR') &\
         (reference_catalogue['lumclass']=='DWARF') &\
         (reference_catalogue['Dilution_Tmag_AP3.0']< 0.1) &\
         (x > 200) & (x < 1800) & (y > 200) & (y < 1800) &\
         ( np.abs( (reference_catalogue['gaiabp'] - reference_catalogue['gaiarp']) - BPRP)< 1)

    print('\tInitial masking bad comparison targets from {:,} to {:,}'.format(len(reference_catalogue), len(reference_catalogue[reference_catalogue_mask])))
    reference_catalogue = reference_catalogue[reference_catalogue_mask] # get rid of naff
    if len(reference_catalogue) < 50 : raise ValueError('Less that 50 targets remain after initial masking, aborting.')

    ###############################################################
    # Create the lambda matrix and iverted matrix
    ###############################################################
    x, y = frame_wcs.all_world2pix(reference_catalogue['ra_deg'],reference_catalogue['dec_deg'],0)
    x_weight = 1e6
    y_weight = 1e6
    mag_weight = 1
    lamb = np.matrix(np.diag([median_absolute_deviation(x)/x_weight,
                    median_absolute_deviation(y)/y_weight,
                    median_absolute_deviation(reference_catalogue['Tmag'])/mag_weight]))
    lamb_inv = np.linalg.inv(lamb)

    ###############################################################
    # Now calcualte the Euclidean distances for each star
    ###############################################################
    distances = np.zeros(len(reference_catalogue))
    for i in range(len(reference_catalogue)):
        #if np.isinf(x[i]) or np.isnan(x[i]) : distances[i] = np.inf
        #if np.isinf(y[i]) or np.isnan(y[i]) : distances[i] = np.inf
        #if np.isinf(reference_catalogue['Tmag'][i]) or np.isnan(reference_catalogue['Tmag'][i]) : distances[i] = np.inf

        x_diff = x[i] - xtarget
        y_diff = y[i] - ytarget
        mag_diff = reference_catalogue['Tmag'][i] - target_row['Tmag'][0] 
        diff = np.matrix([[x_diff], [y_diff], [mag_diff]])
        distances[i] = np.sqrt(np.dot(np.dot(diff.T, lamb_inv), diff))

    # SG hack 
    distances = 500*np.abs(reference_catalogue['Tmag'] - target_row['Tmag'][0])  + np.hypot(x - xtarget, y - ytarget)
    
    ####################################################################################
    # Now get the arguments of the the smallest Euclidean distances and make the table #
    ####################################################################################
    photometry_table_indexes = np.argsort(distances)[:100]
    photometry_table = reference_catalogue[photometry_table_indexes]

    ####################################################################################
    # Now construct the table and appropriate indexes                                  #
    ####################################################################################
    photometry_table_total = vstack((Table(target_row), FP_table, photometry_table)) # makes sure target is at top
    photometry_table_total.add_column(Column(np.concatenate((np.array([0]),np.ones(len(FP_table)), 2*np.ones(len(photometry_table)))).astype(int), name = 'PAOPHOT_IDX'), index = 1)
    photometry_table_total.add_column(Column(np.zeros(len(photometry_table_total)), name = 'ED'), index=2)
    photometry_table_total['ED'][(1+len(FP_table)):] = distances[photometry_table_indexes]
    photometry_table_total.add_column(Column(np.abs(photometry_table_total['Tmag'] - photometry_table_total['Tmag'][0]), name = 'DeltaMag'), index=3)

    photometry_table_total.add_column(Column(np.zeros(len(photometry_table_total)), name = 'Deltapix'), index=4)
    photometry_table_total['Deltapix'][(1+len(FP_table)):] = np.hypot(x[photometry_table_indexes] - xtarget, y[photometry_table_indexes]-ytarget)
    x, y = frame_wcs.all_world2pix(FP_table['ra_deg'],FP_table['dec_deg'],0)
    photometry_table_total['Deltapix'][1:(len(FP_table)+1)] = np.hypot(x - xtarget, y-ytarget)

    ###############################################################
    # Finally, add target to top and write out
    ###############################################################
    outfile = '{:}/TIC-{:}.fits'.format(args.output_dir, args.tic_id)
    print('\tSaving target to {:}'.format(outfile) )
    photometry_table_total.write(outfile, overwrite=True, format='fits')