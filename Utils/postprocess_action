#!/home/sam/anaconda3/bin/python

# Imports
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import argparse, os, sys
from astropy.table import Table 
import numpy as np 
from scipy.stats import sem
from astropy.time import Time
from astropy.stats import sigma_clip
from PAOPhot2.mag_conversion import convertFluxToMags

# Arg parser
def arg_parse():
    """
    Parse the command line arguments
    """
    p = argparse.ArgumentParser("Reduce whole actions.")
    p.add_argument('photometery_catalogue',
                   help='The photometry catalogue from which to  ',
                   type=str)
    p.add_argument('photometry_file',
                   help='The action photometry file for which to create the best comparisons with. ',
                   type=str)
    p.add_argument('--photometery_catalogue_mask',
                   help='The action photometry file mask for which to create the best comparisons with. ',
                   type=str, default='None')
    p.add_argument('--output_dir',
        help='The output directory.',
        type=str, default = '.')
    p.add_argument('--fieldcam',
        help='The Additional output of the field and camera [e.g. NGXXX-YY_811].',
        type=str, default = 'NGXXX-YY_8ZZ')
    return p.parse_args()



def lc_bin(time, flux, bin_width):
        '''
        Function to bin the data into bins of a given width. time and bin_width 
        must have the same units
        '''
        
        edges = np.arange(np.min(time), np.max(time), bin_width)
        dig = np.digitize(time, edges)
        time_binned = (edges[1:] + edges[:-1]) / 2
        flux_binned = np.array([np.nan if len(flux[dig == i]) == 0 else flux[dig == i].mean() for i in range(1, len(edges))])
        err_binned = np.array([np.nan if len(flux[dig == i]) == 0 else sem(flux[dig == i]) for i in range(1, len(edges))])
        time_bin = time_binned[~np.isnan(err_binned)]
        err_bin = err_binned[~np.isnan(err_binned)]
        flux_bin = flux_binned[~np.isnan(err_binned)]   
        
        return time_bin, flux_bin, err_bin

# Main loop
if __name__=="__main__":
    # First, pars the arguments
    args = arg_parse()
    print('Post processing action\n\tphotometery_catalogue file{:}\n\tphotometry file\n\t{:}\n\tphotometery_catalogue_mask {:}'.format(args.photometery_catalogue.split('/')[-1], args.photometry_file.split('/')[-1], args.photometery_catalogue_mask.split('/')[-1]))

    # Now load the photoemtry file and create the corrosponding mask if made
    photometry_file = Table.read(args.photometry_file, format='csv')
    photometery_catalogue = Table.read(args.photometery_catalogue)
    if args.photometery_catalogue_mask=='None' : 
        print('\tUsing all comparison stars.')
        photometery_catalogue_mask = np.ones(len(photometery_catalogue), dtype = np.bool)
    else : 
        photometery_catalogue_mask = np.array(Table.read(args.photometery_catalogue_mask)['MASK'])
        print('\tMasking {:,} comparison stars out of {:,} stars'.format(np.where(photometery_catalogue_mask==False)[0].shape[0], photometery_catalogue_mask.shape[0]))

    # Get a list of TIC IDs
    #_, ind = np.unique([i.split('_')[0] for i in photometry_file.colnames[6:] ], return_index=True)
    #tics = [i.split('_')[0] for i in np.array(photometry_file.colnames[6:])[np.argsort(ind)] ]
    #

    flux_columns = []
    for name in photometry_file.colnames : 
        if ('_Aper_flux_3' in name) and not ('_Aper_flux_3_err' in name) : flux_columns.append(name)
    flux_column_target = flux_columns[0]  # keep the target
    tic_id_target = flux_column_target.split('_')[0]
    flux_columns = np.array(flux_columns[1:])       # remove the target so we can look only at comparison stars
    tics = np.array([i.split('_')[0] for i in flux_columns])
    print('\tTarget = {:}'.format(tic_id_target))

    # Now purge the bad comparisons 
    #tics = np.delete(tics, np.where(tics==tic_id_target)) # get rid of the target
    tics = tics[1:]
    print('\tTarget = {:}'.format(tic_id_target))

    tics = np.delete(tics, np.where(photometery_catalogue_mask==False)) # get rid of the target

    # First, get the target flux 
    target_flux = np.array(photometry_file['{:}_Aper_flux_3'.format(tic_id_target)])
    target_flux_err = np.array(photometry_file['{:}_Aper_flux_3_err'.format(tic_id_target)])

    # Now get the comp flux and errors
    comp_flux = np.zeros(target_flux.shape[0])
    comp_flux_err = np.zeros(target_flux.shape[0])
    for i in range(tics.shape[0])[:] : 
        comp_flux = comp_flux + np.array(photometry_file['{:}_Aper_flux_3'.format(tics[i])])
        comp_flux_err = comp_flux_err + np.array(photometry_file['{:}_Aper_flux_3_err'.format(tics[i])])**2
    comp_flux_err = np.sqrt(comp_flux_err)


    # Work out the detrended flux and errors
    detrended_flux =  target_flux/comp_flux
    detrended_flux_err =  target_flux_err /comp_flux # np.sqrt(detrended_flux**2*((comp_flux_err**2) /  (comp_flux)**2))

    # Now this needs saveing, raw flux which can be compared 
    # Finally, create the 
    tmp = np.array([np.array(photometry_file['JD']), detrended_flux, detrended_flux_err,]).T
    np.savetxt('{:}/{:}_{:}_{:}_FLUX.dat'.format(args.output_dir, tic_id_target, args.fieldcam, Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10]), tmp)

    # Now bin the data
    t_bin, f_bin, f_bin_err = lc_bin(np.array(photometry_file['JD']), detrended_flux, 0.5/24/6)

    # Now sigma clip the binned data to exclude nasty outliers
    f_bin_filtered = sigma_clip(f_bin)
    depth = np.max(f_bin_filtered) - np.min(f_bin_filtered)

    # Now work out a normalisation constant
    Nquarter = int(0.25*f_bin_filtered.shape[0])
    norm_constant = np.max([ np.median(f_bin_filtered[:Nquarter]), np.median(f_bin_filtered[Nquarter:2*Nquarter]) , np.median(f_bin_filtered[2*Nquarter:3*Nquarter]) ,  np.median(f_bin_filtered[-Nquarter:])  ])
    detrended_flux = detrended_flux / norm_constant
    detrended_flux_err = detrended_flux_err/norm_constant
    depth = depth / norm_constant 
    f_bin = f_bin / norm_constant 
    f_bin_err = f_bin_err / norm_constant 

    # establish time offset and other metrics
    time_offset = int(np.min(np.array(photometry_file['JD'])))
    rms = int(1e6*np.std(detrended_flux))
    
    # Now create the figure
    f = plt.figure(figsize = (12,5))
    plt.errorbar(np.array(photometry_file['JD'])-time_offset, detrended_flux, yerr=detrended_flux_err, markersize=3, fmt='k.', ecolor='lightgrey', alpha = 0.3)

    # Now bin to 5 minutes 
    plt.errorbar(t_bin-time_offset, f_bin, yerr=f_bin_err, markersize=3, fmt='k.', ecolor='k', alpha = 1)
    rms_5 = int(1e6*np.std(f_bin))


    tile_text = '{:} [{:}]\n{:}\nRMS = {:,} ppm [{:,} @ 5 min]'.format(tic_id_target,    Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10],args.fieldcam, rms, rms_5)
    plt.gca().set(xlabel='JD-{:,}'.format(time_offset), ylabel='Flux',title=tile_text)
    plt.grid()
    plt.ylim(1 - 1.5*depth, 1 + depth)
    plt.tight_layout()

    # Finally, create the 
    tmp = np.array([np.array(photometry_file['JD']), detrended_flux, detrended_flux_err]).T
    np.savetxt('{:}/{:}_{:}_{:}_FLUX_NORMED.dat'.format(args.output_dir, tic_id_target, args.fieldcam, Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10]), tmp)


    # Finally, convert to mag 
    mag, mag_err = convertFluxToMags(detrended_flux, detrended_flux_err)
    tmp = np.array([np.array(photometry_file['JD']), mag, mag_err]).T
    np.savetxt('{:}/{:}_{:}_{:}_MAG_NORMED.dat'.format(args.output_dir, tic_id_target, args.fieldcam, Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10]), tmp)

    #return f, plt.gca() , Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10], tmp
    plt.savefig('{:}/{:}.png'.format(args.output_dir, args.photometry_file[:-4]))
    plt.close()