#!/home/sam/anaconda3/bin/python

# To avoid OpenBLAS error
import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

# Imports
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

import argparse, os, sys
from astropy.table import Table 
import numpy as np 
from scipy.stats import sem
from astropy.time import Time
from astropy.stats import sigma_clip
from PAOPhot2.mag_conversion import convertFluxToMags
import subprocess 
import warnings
warnings.simplefilter('ignore', np.RankWarning)


# Arg parser
def arg_parse():
    """
    Parse the command line arguments
    """
    p = argparse.ArgumentParser("Reduce whole actions.")
    p.add_argument('photometery_catalogue',
                   help='The photometry catalogue from which to  ',
                   type=str)
    p.add_argument('photometry_file',
                   help='The action photometry file for which to create the best comparisons with. ',
                   type=str)
    p.add_argument('--photometery_catalogue_mask',
                   help='The action photometry file mask for which to create the best comparisons with. ',
                   type=str, default='None')
    p.add_argument('--output_dir',
        help='The output directory.',
        type=str, default = '.')
    p.add_argument('--fieldcam',
        help='The Additional output of the field and camera [e.g. NGXXX-YY_811].',
        type=str, default = 'NGXXX-YY_8ZZ')
    p.add_argument('--apstring',
        help='The aperture suffix to use [default is 3.].',
        type=str, default = '3')
    p.add_argument('--find_best_aperture', action="store_true", default=False)

    return p.parse_args()



def lc_bin(time, flux, bin_width):
        '''
        Function to bin the data into bins of a given width. time and bin_width 
        must have the same units
        '''
        
        edges = np.arange(np.min(time), np.max(time), bin_width)
        dig = np.digitize(time, edges)
        time_binned = (edges[1:] + edges[:-1]) / 2
        flux_binned = np.array([np.nan if len(flux[dig == i]) == 0 else flux[dig == i].mean() for i in range(1, len(edges))])
        err_binned = np.array([np.nan if len(flux[dig == i]) == 0 else sem(flux[dig == i]) for i in range(1, len(edges))])
        time_bin = time_binned[~np.isnan(err_binned)]
        err_bin = err_binned[~np.isnan(err_binned)]
        flux_bin = flux_binned[~np.isnan(err_binned)]   
        
        return time_bin, flux_bin, err_bin


apstring2ap = {'3' : 3.0 , '35' : 3.5, '40' : 4.0, '45' : 4.5, '50' : 5.0, '55' : 5.5, '60' : 6.0, '65' : 6.5 , '70' : 7.0, '75' : 7.5, '80' : 8.0}


def find_best_aperture():
    plt.rcParams.update({'font.size': 5})
    # verbose 
    print('Finding best aperture...')
    
    # If we are here, we need to find the best apertures from 3 to 8 pixels in half pixel steps
    apertures = ['3','35','40', '45', '50', '55', '60', '65', '70', '75','80']
    
    # First, lets check the aperture were actually extracted
    for ap in apertures:
        if 'TIC-{:}_Aper_flux_{:}'.format(target_row['tic_id'][0], ap) not in photometry_file.colnames:
            print('{:} is not a column name, photometry was focused.'.format('TIC-{:}_Aper_flux_{:}'.format(target_row['tic_id'][0], ap)))
            return apertures[0] 
    
    # Now lets get the scatter for each
    STDs = np.zeros(len(apertures), dtype = np.float32)
    print('Cycling apertures...')
    x = photometry_file['JD'] - int(np.min(photometry_file['JD']))
    ncols = 4
    nrows = 3
    f, ax = plt.subplots(nrows=3, ncols=4, figsize = (12,8))
    for i in range(STDs.shape[0]):
        plot_idxi, plot_idxj = i // ncols, np.mod(i,ncols) #-1
        f_ = photometry_file['TIC-{:}_Aper_flux_{:}'.format(target_row['tic_id'][0], apertures[i])]
        trend = np.poly1d(np.polyfit(x, f_, 3))(x)
        STDs[i] = np.std( (f_ / trend) - 1)
        x_bin, f_bin, f_bin_err = lc_bin(x, f_, 0.5/24/6)
        ax[plot_idxi, plot_idxj].scatter(x, f_/1000, c='grey', s=1)
        ax[plot_idxi, plot_idxj].errorbar(x_bin, f_bin/1e3, f_bin_err/1e3 , fmt='b.')
        ax[plot_idxi, plot_idxj].plot(x, trend/1000 , 'r', zorder=10)
        diff = np.max(trend) - np.min(np.poly1d(np.polyfit(x, f_, 3))(x))
        ax[plot_idxi, plot_idxj].set(xlabel='JD - {:,}'.format(int(np.min(photometry_file['JD']))), ylabel='Raw flux [10$^{3}$]', title = 'Aperture {:} pix\n'.format(apstring2ap[apertures[i]]) + '$\sigma$ = ' + '{:.3f} %'.format(100*STDs[i]), ylim = ((np.min(trend) - 0.25*diff) / 1e3, (np.max(trend) + 0.25*diff)/1e3) )
        

    ax[2,3].plot([3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8], 100*STDs, 'k')
    ax[2,3].axvline([3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8][np.argmin(STDs)], c='r')
    ax[2,3].set(xlabel='Aperture size', ylabel='Scatter [%]')
    

    plt.tight_layout()
    plt.savefig('{:}/TIC-{:}_{:}_{:}_aperture_selection.png'.format(args.output_dir, target_row['tic_id'][0], args.fieldcam, Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10]))
    plt.close()

    for i in range(STDs.shape[0]):
        string = '\tAperture {:.1f} pix has {:.3f}% scatter'.format(apstring2ap[apertures[i]] ,  100*STDs[i])
        if i==np.argmin(STDs) : string += '  <--- best'
        print(string)

    return apertures[np.argmin(STDs)]




def plot_summary_1():
    plt.rcParams.update({'font.size': 8})

    fig, axs = plt.subplots(5,2, constrained_layout=True, figsize =  (10, 5*3), )

    # Plot normalised flux on both top plots
    axs[0,0].errorbar(time-time_offset, normlaised_flux, yerr=normlaised_flux_err, markersize=3, fmt='k.', ecolor='lightgrey', alpha = 0.2)
    axs[0,0].errorbar(t_bin-time_offset, f_bin_normalised, yerr=f_bin_err_normlaised, markersize=3, fmt='k.', ecolor='k', alpha = 1)
    axs[0,0].set(ylabel = 'Normliased flux', xlabel='JD - {:,}'.format(time_offset), ylim=(1 - 1.5*depth_normalised, 1 + depth_normalised), 
                    title='TIC-{:}\n{:}\nSummary 1'.format(target_row['tic_id'][0], Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10]))

    axs[0,1].errorbar(time-time_offset, normlaised_flux, yerr=normlaised_flux_err, markersize=3, fmt='k.', ecolor='lightgrey', alpha = 0.2)
    axs[0,1].errorbar(t_bin-time_offset, f_bin_normalised, yerr=f_bin_err_normlaised, markersize=3, fmt='k.', ecolor='k', alpha = 1)
    axs[0,1].set(ylabel = 'Normliased flux', xlabel='JD - {:,}'.format(time_offset), ylim=(1 - 1.5*depth_normalised, 1 + depth_normalised), 
                    title='Aperture {:.1f} pixel\n Raw RMS = {:.3f} %\n5-min RMS = {:.3f} %'.format(apstring2ap[args.apstring], 100*np.std(normlaised_flux), 100*np.std(f_bin_normalised)))

    # now plot centroiding FWHM metrics and max flux 
    axs[1,0].plot(time-time_offset,photometry_file['TIC-{:}_Aper_flux_{:}_max'.format(target_row['tic_id'][0], args.apstring)]/1e3, 'k', alpha = 0.2)
    t_maxflux_bin, f_maxflux_bin, _ = lc_bin(np.array(photometry_file['JD']), photometry_file['TIC-{:}_Aper_flux_{:}_max'.format(target_row['tic_id'][0], args.apstring)]/1e3, 0.5/24/6)
    axs[1,0].plot(t_maxflux_bin-time_offset, f_maxflux_bin, 'k')
    diff = np.max(f_maxflux_bin) - np.min(f_maxflux_bin)
    ylim = (np.min(f_maxflux_bin) - 0.25*diff, np.max(f_maxflux_bin) + 0.25*diff)
    axs[1,0].set(ylabel = 'Max counts [10$^{3}$]', xlabel='JD - {:,}'.format(time_offset),ylim=ylim)

    axs[1,1].plot(time-time_offset,photometry_file['SEP_FWHMC'], 'k', label = 'SEP near center')
    axs[1,1].plot(time-time_offset,photometry_file['SEP_FWHM'], 'grey', alpha = 0.2, label='SEP full field')
    axs[1,1].fill_between(time-time_offset, photometry_file['PALADIN_PSF_MED_FWHM'] - photometry_file['PALADIN_PSF_RMS_FWHM'],
                                            photometry_file['PALADIN_PSF_MED_FWHM'] + photometry_file['PALADIN_PSF_RMS_FWHM'], color = 'r', alpha = 0.2)
    axs[1,1].plot(time-time_offset,photometry_file['PALADIN_PSF_MED_FWHM'], 'r', alpha = 1, label='PSF log')

    axs[1,1].set(ylabel = 'FWHM [pix]', xlabel='JD - {:,}'.format(time_offset))
    axs[1,1].legend()


    # Now plot skycounts and raw flux
    #axs[2,0].plot(time-time_offset,photometry_file['TIC-{:}_Sky_level'.format(target_row['tic_id'][0])]/1e3, 'k', label='Sky counts\nin Aperture')
    axs[2,0].errorbar(time-time_offset, photometry_file['TIC-{:}_Sky_level'.format(target_row['tic_id'][0])]/1e3, yerr=photometry_file['TIC-{:}_Sky_level_err'.format(target_row['tic_id'][0])]/1e3, markersize=3, fmt='k.', ecolor='lightgrey', alpha = 1)
    axs[2,0].set(ylabel = 'Sky counts\nIn aperture [10$^{3}$]', xlabel='JD - {:,}'.format(time_offset))

    axs[2,1].errorbar(time-time_offset, target_flux/1e3, yerr=target_flux_err/1e3, markersize=3, fmt='k.', ecolor='lightgrey', alpha = 0.2)
    t_raw_target_bin, f_raw_target_bin, f_raw_target_bin_err = lc_bin(np.array(photometry_file['JD']), target_flux/1e3, 0.5/24/6)
    axs[2,1].errorbar(t_raw_target_bin-time_offset, f_raw_target_bin, yerr=f_raw_target_bin_err, markersize=3, fmt='k.', ecolor='lightgrey', alpha = 1, label='Raw flux\nin Perture')
    axs[2,1].legend(loc=2)
    diff = np.max(f_raw_target_bin) - np.min(f_raw_target_bin)
    ylim = (np.min(f_raw_target_bin) - 0.25*diff, np.max(f_raw_target_bin) + 0.25*diff)
    axs[2,1].set(ylabel = 'Raw counts\nIn aperture [10$^{3}$]', ylim = ylim )

    # Now plot centroiding information
    axs[3,0].scatter(time-time_offset,photometry_file['TIC-{:}_X_coordinate'.format(target_row['tic_id'][0])], c='b', s=2, alpha = 0.2, label='WCS positon' )  
    axs[3,0].scatter(time-time_offset,photometry_file['TIC-{:}_X_coordinate_centroid'.format(target_row['tic_id'][0])], c='g', s=2, alpha = 0.2, label='SEP winpos centroid'  )  
    axs[3,0].scatter(time-time_offset,photometry_file['TIC-{:}_X_coordinate_flux_centroid'.format(target_row['tic_id'][0])], c='r', s=2, alpha = 0.2, label='Flux centroid'  )  
    axs[3,0].set(ylabel = 'X pixel', xlabel='JD - {:,}'.format(time_offset))
    axs[3,0].legend() 

    axs[3,1].scatter(time-time_offset,photometry_file['TIC-{:}_Y_coordinate'.format(target_row['tic_id'][0])], c='b', s=2, alpha = 0.2, label='WCS positon' )  
    axs[3,1].scatter(time-time_offset,photometry_file['TIC-{:}_Y_coordinate_centroid'.format(target_row['tic_id'][0])], c='g', s=2, alpha = 0.2, label='SEP winpos centroid'  ) 
    axs[3,1].scatter(time-time_offset,photometry_file['TIC-{:}_Y_coordinate_flux_centroid'.format(target_row['tic_id'][0])], c='r', s=2, alpha = 0.2, label='Flux centroid'  )   
    axs[3,1].set(ylabel = 'Y pixel', xlabel='JD - {:,}'.format(time_offset))
    axs[3,1].legend() 

    # Now plot airmass and temperatures
    axs[4,0].plot(time-time_offset,photometry_file['AIRMASS'], 'k' )  
    axs[4,0].set(ylabel = 'Airmass [sec z]', xlabel='JD - {:,}'.format(time_offset))
    
    axs[4,1].plot(time-time_offset,photometry_file['CCD_TEMP'], 'b' , label='CCD Temperature [K]')
    ax_focus = axs[4,1].twinx()
    ax_focus.plot(time-time_offset,photometry_file['FOCUS_TEMP'], 'g' , label='Focus Temperature [K]')
    axs[4,1].legend(loc=0) 
    ax_focus.legend(loc=3)
    ax_focus.set(ylabel='Focus temperature [K]')
    axs[4,1].set(ylabel = 'CCD temperature [K]', xlabel='JD - {:,}'.format(time_offset))


    plt.savefig('{:}/TIC-{:}_{:}_{:}_AP{:}_summary_1.png'.format(args.output_dir, target_row['tic_id'][0], args.fieldcam, Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10], apstring2ap[args.apstring]))
    plt.close()
    return


def summary_2_plot_func(ax, time, time_offset, star_flux, star_flux_err, comparison_flux, comparison_flux_err, airmass, X, XC, XFC, Y, YC, YFC, max_flux, star_sky):
    # Now plot the detrended flux 
    detrended_flux = star_flux / comparison_flux 
    detrended_flux_err = star_flux_err / comparison_flux 
    detrended_time_binned, detrended_binned, detrended_binned_err = lc_bin(time, detrended_flux, 0.5/24/6)

    f_bin_filtered = sigma_clip(detrended_binned)

    Nquarter = int(0.25*f_bin_filtered.shape[0])
    norm_constant = np.max([ np.median(f_bin_filtered[:Nquarter]), np.median(f_bin_filtered[Nquarter:2*Nquarter]) , np.median(f_bin_filtered[2*Nquarter:3*Nquarter]) ,  np.median(f_bin_filtered[-Nquarter:])  ])

    # Now do the normalised flux
    normlaised_flux = detrended_flux / norm_constant 
    normlaised_flux_err = detrended_flux_err / norm_constant 
    ax[0].plot(time-time_offset, normlaised_flux,c='lightgrey')
    normlaised_time_binned, normlaised_binned, normlaised_binned_err = lc_bin(time, normlaised_flux, 0.5/24/6)
    ax[0].errorbar(normlaised_time_binned-time_offset, normlaised_binned, yerr=normlaised_binned_err, markersize=1, fmt='k.', alpha = 1, zorder=10)

    ylim_normalised = (np.min(normlaised_binned) - 0.25*(np.max(normlaised_binned) - np.min(normlaised_binned)), np.max(normlaised_binned) + 0.25*(np.max(normlaised_binned) - np.min(normlaised_binned)))
    ax[0].set(ylabel='Normalised Flux', xlabel='JD - {:,}'.format(time_offset), ylim=ylim_normalised )

    # Now do the max flux 
    ax[1].plot(time-time_offset, max_flux/1e3, c='lightgrey')
    max_time_binned, max_binned, max_binned_err = lc_bin(time, max_flux/1e3, 0.5/24/6)
    ax[1].errorbar(max_time_binned-time_offset, max_binned, yerr=max_binned_err, markersize=3, fmt='k.', ecolor='lightgrey', alpha = 1)
    ylim = (np.min(max_binned) - 0.25*(np.max(max_binned) - np.min(max_binned)), np.max(max_binned) + 0.25*(np.max(max_binned) - np.min(max_binned)))
    ax[1].set(ylabel='Max counts in aperture [10$^{3}$]', xlabel='JD - {:,}'.format(time_offset ), ylim=ylim)

    # Now do the raw flux 
    ax[2].plot(time-time_offset, star_flux/1e3, c='lightgrey')
    star_flux_time_binned, star_flux_binned, star_flux_binned_err = lc_bin(time, star_flux/1e3, 0.5/24/6)
    ax[2].errorbar(star_flux_time_binned-time_offset, star_flux_binned, yerr=star_flux_binned_err, markersize=3, fmt='k.', ecolor='lightgrey', alpha = 1)
    ylim = (np.min(star_flux_binned) - 0.25*(np.max(star_flux_binned) - np.min(star_flux_binned)), np.max(star_flux_binned) + 0.25*(np.max(star_flux_binned) - np.min(star_flux_binned)))
    ax[2].set(ylabel='Raw counts in aperture [10$^{3}$]', xlabel='JD - {:,}'.format(time_offset ), ylim=ylim)

    # Now plot the sky flux 
    ax[3].plot(time-time_offset, star_sky/1e3, c='lightgrey')
    star_sky_time_binned, star_sky_binned, star_sky_binned_err = lc_bin(time, star_sky/1e3, 0.5/24/6)
    ax[3].errorbar(star_sky_time_binned-time_offset, star_sky_binned, yerr=star_sky_binned_err, markersize=3, fmt='k.', ecolor='lightgrey', alpha = 1)
    ylim = (np.min(star_sky_binned) - 0.25*(np.max(star_sky_binned) - np.min(star_sky_binned)), np.max(star_sky_binned) + 0.25*(np.max(star_sky_binned) - np.min(star_sky_binned)))
    ax[3].set(ylabel='Sky counts in aperture [10$^{3}$]', xlabel='JD - {:,}'.format(time_offset ), ylim=ylim) 

    # Now do centroiding 
    ax[4].scatter(time-time_offset,X, c='b', s=2, alpha = 0.2, label='WCS positon' )  
    ax[4].scatter(time-time_offset,XC, c='g', s=2, alpha = 0.2, label='SEP winpos centroid'  )  
    ax[4].scatter(time-time_offset,XFC, c='r', s=2, alpha = 0.2, label='Flux centroid'  )  

    ax[4].set(ylabel = 'X pixel', xlabel='JD - {:,}'.format(time_offset))
    ax[4].legend() 

    ax[5].scatter(time-time_offset,Y, c='b', s=2, alpha = 0.2, label='WCS positon' )  
    ax[5].scatter(time-time_offset,YC, c='g', s=2, alpha = 0.2, label='SEP winpos centroid'  ) 
    ax[5].scatter(time-time_offset,YFC, c='r', s=2, alpha = 0.2, label='Flux centroid'  )   
    ax[5].set(ylabel = 'Y pixel', xlabel='JD - {:,}'.format(time_offset))
    ax[5].legend() 

    return 

    
def plot_summary_2():
    # Now plots transits
    ncols = 6
    nrows = 1 + len(FP_table)
    f, axs = plt.subplots(nrows = nrows, ncols = ncols, figsize=(4*ncols, 4*nrows), constrained_layout=True)
    axs = np.atleast_2d(axs)
    for i in range(1+len(FP_table)):
        if i==0:
            summary_2_plot_func(axs[i], time, time_offset, target_flux, target_flux_err, comparison_flux, comparison_flux_err,
                                photometry_file['AIRMASS'], photometry_file['TIC-{:}_X_coordinate'.format(target_row['tic_id'][0])],
                                photometry_file['TIC-{:}_X_coordinate_centroid'.format(target_row['tic_id'][0])],
                                photometry_file['TIC-{:}_X_coordinate_flux_centroid'.format(target_row['tic_id'][0])],
                                photometry_file['TIC-{:}_Y_coordinate'.format(target_row['tic_id'][0])],
                                photometry_file['TIC-{:}_Y_coordinate_centroid'.format(target_row['tic_id'][0])],
                                photometry_file['TIC-{:}_Y_coordinate_flux_centroid'.format(target_row['tic_id'][0])],
                                photometry_file['TIC-{:}_Aper_flux_{:}_max'.format(target_row['tic_id'][0], args.apstring)],
                                photometry_file['TIC-{:}_Sky_level_{:}'.format(target_row['tic_id'][0], args.apstring)])
            text = 'TIC-{:}\nTmag = {:.3f}'.format(target_row['tic_id'][0], target_row['Tmag'][0])
            #axs[i,0].text(-0.8,0.5, text, size=17, ha="center", transform=axs[i,0].transAxes)
            axs[i,0].set_title(text)
        else:
            summary_2_plot_func(axs[i], time, time_offset,  photometry_file['TIC-{:}_Aper_flux_{:}'.format(FP_table['tic_id'][i-1], args.apstring)],  photometry_file['TIC-{:}_Aper_flux_{:}_err'.format(FP_table['tic_id'][i-1], args.apstring)], comparison_flux, comparison_flux_err,
                                photometry_file['AIRMASS'], photometry_file['TIC-{:}_X_coordinate'.format(FP_table['tic_id'][i-1])],
                                photometry_file['TIC-{:}_X_coordinate_centroid'.format(FP_table['tic_id'][i-1])],
                                photometry_file['TIC-{:}_X_coordinate_flux_centroid'.format(FP_table['tic_id'][0])],
                                photometry_file['TIC-{:}_Y_coordinate'.format(FP_table['tic_id'][i-1])],
                                photometry_file['TIC-{:}_Y_coordinate_centroid'.format(FP_table['tic_id'][i-1])],
                                photometry_file['TIC-{:}_Y_coordinate_flux_centroid'.format(FP_table['tic_id'][0])],
                                photometry_file['TIC-{:}_Aper_flux_{:}_max'.format(FP_table['tic_id'][i-1], args.apstring)],
                                photometry_file['TIC-{:}_Sky_level_{:}'.format(FP_table['tic_id'][i-1], args.apstring)])  

            text = 'TIC-{:}\nTmag = {:.3f}\n$\Delta$Tmag = {:.3f}\n$\Delta$ pix = {:.2f}\n    = {:.0f}"'.format(FP_table['tic_id'][i-1],
                                                                     FP_table['Tmag'][i-1],
                                                                     target_row['Tmag'][0] - FP_table['Tmag'][i-1],
                                                                     FP_table['Deltapix'][i-1], FP_table['Deltapix'][i-1]*5)
            #axs[i,0].text(-0.8,0.3, text, size=17, ha="center", transform=axs[i,0].transAxes)
            axs[i,0].set_title(text)


    axs[0,1].set_title('Aperture {:.1f} pix'.format(apstring2ap[args.apstring]))
    plt.savefig('{:}/TIC-{:}_{:}_{:}_AP{:}_summary_2.png'.format(args.output_dir, target_row['tic_id'][0], args.fieldcam, Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10], apstring2ap[args.apstring]))
    plt.close()


# Main loop
if __name__=="__main__":
    # First, pars the arguments
    args = arg_parse()
    print('Post processing action\n\tphotometery_catalogue file{:}\n\tphotometry file\n\t{:}\n\tphotometery_catalogue_mask {:}'.format(args.photometery_catalogue.split('/')[-1], args.photometry_file.split('/')[-1], args.photometery_catalogue_mask.split('/')[-1]))

    # Now load the photoemtry file and create the corrosponding mask if made
    photometry_file = Table.read(args.photometry_file, format='csv')
    photometery_catalogue = Table.read(args.photometery_catalogue)

    # Now get the target and the comparisons 
    target_row = photometery_catalogue[photometery_catalogue['PAOPHOT_IDX']==0]
    FP_table = photometery_catalogue[photometery_catalogue['PAOPHOT_IDX']==1]
    comparison_table = photometery_catalogue[photometery_catalogue['PAOPHOT_IDX']==2][Table.read(args.photometery_catalogue_mask)['MASK']]

    # Now see if we need to find the best aperture
    if args.find_best_aperture : args.apstring = find_best_aperture()

    # Now lets get the flux
    print('Extracting target and comparison fluxes')
    target_flux = np.array(photometry_file['TIC-{:}_Aper_flux_{:}'.format(target_row['tic_id'][0], args.apstring)])
    target_flux_err = np.array(photometry_file['TIC-{:}_Aper_flux_{:}_err'.format(target_row['tic_id'][0], args.apstring)])

    comparison_flux = np.zeros(len(photometry_file))
    comparison_flux_err = np.zeros(len(photometry_file))

    for i in range(len(comparison_table)) : 
        comparison_flux = comparison_flux + photometry_file['TIC-{:}_Aper_flux_{:}'.format(comparison_table['tic_id'][i], args.apstring)]
        comparison_flux_err = comparison_flux_err + photometry_file['TIC-{:}_Aper_flux_{:}_err'.format(comparison_table['tic_id'][i], args.apstring)]**2
    comparison_flux_err = np.sqrt(comparison_flux_err)


    # Work out the detrended flux and errors
    detrended_flux =  target_flux/comparison_flux
    detrended_flux_err =  target_flux_err / comparison_flux  # np.sqrt(detrended_flux**2*((comp_flux_err**2) /  (comp_flux)**2))

    # Now bin the photometry to 5 minutes
    t_bin, f_bin, f_bin_err = lc_bin(np.array(photometry_file['JD']), detrended_flux, 0.5/24/6)
    rms_5 = int(1e6*np.std(f_bin))

    # establish time offset and other metrics
    rms = int(1e6*np.std(detrended_flux))
    time = np.array(photometry_file['JD'])
    time_offset = int(np.min(time))

    # Now sigma clip the binned data to exclude nasty outliers
    f_bin_filtered = sigma_clip(f_bin)
    depth_raw = np.max(f_bin_filtered) - np.min(f_bin_filtered)

    # Now work out a normalisation constant
    Nquarter = int(0.25*f_bin_filtered.shape[0])
    norm_constant = np.max([ np.median(f_bin_filtered[:Nquarter]), np.median(f_bin_filtered[Nquarter:2*Nquarter]) , np.median(f_bin_filtered[2*Nquarter:3*Nquarter]) ,  np.median(f_bin_filtered[-Nquarter:])  ])
    normlaised_flux = detrended_flux / norm_constant
    normlaised_flux_err = detrended_flux_err / norm_constant
    f_bin_normalised = f_bin / norm_constant
    f_bin_err_normlaised = f_bin_err / norm_constant
    depth_normalised= np.max(f_bin_filtered/ norm_constant) - np.min(f_bin_filtered/ norm_constant)

    # Now save the raw flux in the action folder and in action lightcurves (used for photpack)
    tmp = np.array([np.array(photometry_file['JD']), detrended_flux, detrended_flux_err,]).T
    np.savetxt('{:}/TIC-{:}_{:}_{:}_FLUX.dat'.format(args.output_dir, target_row['tic_id'][0], args.fieldcam, Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10]), tmp)

    # Finally, save the normalised lightcurve 
    tmp = np.array([np.array(photometry_file['JD']),normlaised_flux, normlaised_flux_err]).T
    np.savetxt('{:}/TIC-{:}_{:}_{:}_FLUX_NORMED.dat'.format(args.output_dir, target_row['tic_id'][0], args.fieldcam, Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10]), tmp)

    # Now save the action lightcurve
    tmp = np.array([np.array(photometry_file['JD']), np.array(photometry_file['BJD']), np.array(photometry_file['HJD']),
                    np.array(photometry_file['AIRMASS']),
                    np.array(photometry_file['TIC-{:}_X_coordinate'.format(target_row['tic_id'][0])]) ,  np.array(photometry_file['TIC-{:}_X_coordinate_centroid'.format(target_row['tic_id'][0])]), np.array(photometry_file['TIC-{:}_X_coordinate_flux_centroid'.format(target_row['tic_id'][0])]),
                    np.array(photometry_file['TIC-{:}_Y_coordinate'.format(target_row['tic_id'][0])]) ,  np.array(photometry_file['TIC-{:}_Y_coordinate_centroid'.format(target_row['tic_id'][0])]), np.array(photometry_file['TIC-{:}_Y_coordinate_flux_centroid'.format(target_row['tic_id'][0])]),
                    np.array(photometry_file['TIC-{:}_Sky_level'.format(target_row['tic_id'][0])]) ,  np.array(photometry_file['TIC-{:}_Sky_level_err'.format(target_row['tic_id'][0])]),
                    np.array(photometry_file['TIC-{:}_Aper_flux_{:}_max'.format(target_row['tic_id'][0], args.apstring)]) ,
                    detrended_flux, detrended_flux_err]).T
    header = ['JD', 'BJD', 'HJD',
              'AIRMASS',
              'X', 'XWINPOS', 'XFLUXCENTROID',
              'Y', 'YWINPOS', 'YFLUXCENTROID',
              'SKY_COUNTS_IN_APERTURE', 'SKY_COUNTS_IN_APERTURE_ERR',
              'MAX_PIXEL_COUNT_IN_APERTURE',
              'DETRENDED_FLUX', 'DETRENDED_FLUX_ERR']
    header = ' '.join(header)
    try : np.savetxt('{:}/TIC-{:}_{:}_{:}_FLUX.dat'.format('/ngts/staging/archive/PAOPhot2/action_lightcurves', target_row['tic_id'][0], args.fieldcam, Time(np.array(photometry_file['JD'])[0], format='jd').datetime.isoformat()[:10]), tmp, header=header)
    except : print('Unable to save LC!!!!!!!!!!!')


    #################################
    #        Summary plot 1         #
    #################################

    plot_summary_1()
    plot_summary_2()



    # Now make the ngtscut call
    print('Now doing ngtscut')
    cmd = '/usr/local/anaconda3/bin/ngtscut {:} {:} {:} 30 1'.format(args.photometry_file.split('_')[-2],
                                                                        np.median(photometry_file['TIC-{:}_X_coordinate'.format(target_row['tic_id'][0])]),
                                                                        np.median(photometry_file['TIC-{:}_Y_coordinate'.format(target_row['tic_id'][0])]))
    print(cmd)
    errcode = subprocess.call(cmd, shell=True, stderr=subprocess.STDOUT, timeout=3*3600) # 3hr timeout

    print('Finished.')


    exit()