#!/home/sam/anaconda3/bin/python

# To avoid OpenBLAS error
import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'


# Imports
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import argparse, os, sys
from astropy.table import Table , vstack, Column
import numpy as np 
from scipy.stats import sem
from astropy.time import Time
from astropy.stats import sigma_clip
import glob
from tqdm import tqdm

from PAOPhot2.mag_conversion import convertFluxToMags
from PAOPhot2.db import PAOPhot_paths

# Arg parser
def arg_parse():
    """
    Parse the command line arguments
    """
    p = argparse.ArgumentParser("Pack PAOPhot2 photometry")
    return p.parse_args()


if __name__=="__main__":
    # parse the arguemnts
    args = arg_parse()

    # get a list of the photometry files to pack 
    photometry_files = glob.glob('{:}/action_lightcurves/*_FLUX.dat'.format(PAOPhot_paths['PAOPhot2_data_path'])) 
    photometry_files.sort()
    print('Found {:,} files'.format(len(photometry_files)))

    # Get a list of unique objects, and create the list of files for each object
    objects = np.unique([i.split('/')[-1].split('_')[0] for i in photometry_files])
    object_dict = {i : [] for i in objects}
    for file in photometry_files : 
        object_dict[file.split('/')[-1].split('_')[0]].append([file, *file.split('/')[-1].split('_')[:-1]]) # file , object, field, camera, date, _ , -1 is FLUX.dat

    # now we have a list of photometry, we can start paking
    tt = None
    for i in range(len(objects)):
        print('Packing {:} with {:,} files'.format(objects[i], len(object_dict[objects[i]])), end = ' ')
        object_data = None
        for j in tqdm(range(len(object_dict[objects[i]])), desc = 'TIC-{:}'.format(object_dict[objects[i]][0])):
            print(object_dict[objects[i]][j])
            filename, object, field, camera, date = object_dict[objects[i]][j]

            # Add the columns 
            t = Table.read(filename, format='ascii')
            t.add_column(Column(np.tile(object,len(t))), name = 'OBJECT')
            t.add_column(Column(np.tile(field,len(t))), name = 'FIELD')
            t.add_column(Column(np.tile(camera,len(t))), name = 'CAMERA')
            t.add_column(Column(np.tile(date,len(t))), name = 'DATE')

            # Now add to total data 
            if j==0 : tt = t.copy()
            else    : tt = vstack((tt,t))

        output_filename = '{:}/output_lightcurves/{:}.fits'.format(PAOPhot_paths['PAOPhot2_data_path'], object_dict[objects[i]][0][1])
        tt.sort('JD')
        tt.write(output_filename, format='fits', overwrite=True)
        print(' complete.')

