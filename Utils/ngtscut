#!/home/sam/anaconda3/bin/python

# To avoid OpenBLAS error
import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'

# Imports
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
plt.rcParams['animation.ffmpeg_path'] = '/usr/local/bin/ffmpeg' # Add the path of ffmpeg here!!
import matplotlib.cm as cm
from matplotlib.patches import Circle

import subprocess
import argparse, os, sys
from PAOPhot2.db import is_action_ready_to_reduce, get_action_info , get_images_information_for_action, get_image_information, PAOPhot_paths , get_autoguider_information
#from PAOPhot2.make_photometry_catalogue import make_TIC_target_catalogue
from PAOPhot2.time_conversion import convert_MJD
from PAOPhot2.plot_functions import plot_target_night
from astropy.io import fits 
from multiprocessing import Pool 
from astropy.table import Table 
import numpy as np 
from astropy.time import Time
from tqdm import tqdm 
import matplotlib.animation as animation
import subprocess as sp
from contextlib import contextmanager

# Arg parser
def arg_parse():
    """
    Parse the command line arguments
    """
    p = argparse.ArgumentParser("Make frame movies for action.")
    p.add_argument('action',
                   help='The action ID',
                   type=str)

    p.add_argument('x',
                   help='The x position',
                   type=int)

    p.add_argument('y',
                   help='The Y position',
                   type=int)


    p.add_argument('width',
                   help='The width',
                   type=int)

    p.add_argument('frame_skip',
                   help='Plot every [frame_skip] frame',
                   type=int, default = 100)

    return p.parse_args()

def check_image_location(das_id, action, image_id):
    # First check if it hasn't been compressed yet and local
    image_path = '/ngts/das{:02}/action{:}_observeField/IMAGE{:}.fits'.format(das_id, action, image_id)
    if os.path.isfile(image_path) : return image_path 

    # Now check if local and has been compressed
    image_path = '/ngts/das{:02}/action{:}_observeField/IMAGE{:}.fits+bz2'.format(das_id, action, image_id)
    if os.path.isfile(image_path) : return image_path  

    # Now check if its finally on staging
    image_path = '/ngts/staging/action{:}_observeField/IMAGE{:}.fits.bz2'.format(action,  image_id) # action has been copied to staging
    if os.path.isfile(image_path) : return image_path  

    return None

def cut_image(data, X, Y, width):
    xmin = int(np.clip(Y-width, 0, data.shape[1]))
    xmax = int(np.clip(Y+width, 0, data.shape[1]))
    ymin = int(np.clip(X-width, 0, data.shape[0]))
    ymax = int(np.clip(X+width, 0, data.shape[0]))
    if (xmin==xmax) or (ymin==ymax) : return None
    else : return  data[ xmin : xmax,    ymin : ymax   ]

def get_lims(data, X, Y, width):
    xmin = int(np.clip(Y-width, 0, data.shape[1]))
    xmax = int(np.clip(Y+width, 0, data.shape[1]))
    ymin = int(np.clip(X-width, 0, data.shape[0]))
    ymax = int(np.clip(X+width, 0, data.shape[0]))
    return xmin, xmax , ymin , ymax



@contextmanager
def change_directory(path):
    '''
    Context manager to change into a directory, then back again when the scope
    is over
    :param path:
        New path to change to
    '''
    old_cwd = os.getcwd()
    try:
        os.chdir(path)
        yield path
    finally:
        os.chdir(old_cwd)

def generate_movie(image_directory, output_filename, fps=15, use_mencoder=False):
    '''
    Render a mp4 movie from a directory of png files. Use ffmpeg for this.
    :param image_directory:
        Directory of png files
    :param output_filename:
        Resulting movie filename
    :param fps:
        Frames per second of the final movie
    :param use_mencoder:
        Use mencoder instead of ffmpeg
    '''
    output_filename = os.path.realpath(output_filename)

    n_cpu = 4
    with change_directory(image_directory):
        if use_mencoder:
            cmd = list(map(str, [
                'mencoder', 'mf://*.png', '-mf',
                'w=800:h=600:fps={}:type=png'.format(fps), '-ovc', 'x264',
                '-x264encopts',
                'crf=18:nofast_pskip:nodct_decimate:nocabac:global_header:threads={}'.format(
                    n_cpu), '-of', 'lavf', '-lavfopts', 'format=mp4', '-o',
                output_filename
            ]))
        else:
            cmd = list(map(str, ['ffmpeg', '-y', '-framerate', fps, '-pattern_type',
                                 'glob', '-i', '*.png', '-c:v', 'mpeg4', '-b:v', '16M',
                                 '-threads', n_cpu, output_filename]))

        sp.check_call(cmd)


def worker(i):
    # load the image data
    image_path = check_image_location(action_info['das_id'], args.action, images_information[i]['image_id'])  
    image_data = fits.open(image_path)[0].data 
    JD, _, _ = convert_MJD(images_information[i]['mjd'],0,0)

    # Get image scaling
    img_median=np.median(image_data)
    img_rms=1.48*np.median(np.abs(image_data-img_median))
    zmin = img_median-img_rms*5
    zmax = img_median+img_rms*9

    # Plot image
    f = plt.figure() 
    ax = plt.gca()
    ix0, ix1, iy0, iy1 = get_lims(image_data, args.x, args.y, args.width)
    im = plt.imshow(image_data, cmap=cm.get_cmap('afmhot'), origin='lower', interpolation='None', vmin=zmin, vmax=zmax,  aspect='equal')

    # Now plot circle aperture 
    c=Circle((args.x, args.y), radius=3., color='k', fill=False)
    ax.add_artist(c)

    # Now format plot
    title_text = 'Action : {:}\nDAS : {:} Camera {:}\n{:}'.format(args.action, action_info['das_id'] , action_info['camera_id'] , JD.datetime.isoformat() )
    ax.set(xlabel = 'X', ylabel = 'Y', title = title_text, xlim=(ix0, ix1) , ylim = (iy0, iy1))
    plt.tight_layout()
    plt.savefig('{:}/{:05}.png'.format(output_directory,i))
    plt.close()

# Main loop
if __name__=="__main__":
    # First, pars the arguments
    args = arg_parse()

    # Now get an image list
    images_information = get_images_information_for_action(args.action)
    action_info = get_action_info(args.action) 
    print('\t\tFound information for {:,} science images'.format(len(images_information)))

    #create the output directory
    output_directory = '{:}/ngtscut/action{:}_X_{:}_Y_{:}_W_{:}'.format(PAOPhot_paths['PAOPhot2_data_path'] ,args.action, args.x, args.y, args.width)
    output_filename = '{:}/ngtscut/action{:}_X_{:}_Y_{:}_W_{:}.mp4'.format(PAOPhot_paths['PAOPhot2_data_path'] ,args.action, args.x, args.y, args.width)
    os.system('mkdir -p {:}'.format(output_directory))

    # Now make the plots
    pool = Pool(4)
    for _ in tqdm(pool.imap_unordered(worker, range(len(images_information))[::args.frame_skip]), total=len(images_information[::args.frame_skip]),  desc='Making plots') : pass
    pool.close()
    pool.join() 
    
    # Now animate
    generate_movie(output_directory, output_filename, fps=15, use_mencoder=False)

    # Now clean up 
    os.system('rm -rf {:}'.format(output_directory))