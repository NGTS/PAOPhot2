#!/home/sam/anaconda3/bin/python

# Imports
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import argparse, os, sys
from astropy.table import Table 
import numpy as np 

# Arg parser
def arg_parse():
    """
    Parse the command line arguments
    """
    p = argparse.ArgumentParser("Reduce whole actions.")
    p.add_argument('photometery_catalogue',
                   help='The photometry catalogue from which to  ',
                   type=str)
    p.add_argument('photometry_file',
                   help='The action photometry file for which to create the best comparisons with. ',
                   type=str)
    p.add_argument('--output_dir',
                   help='The output directory.',
                   type=str, default = '.')
    return p.parse_args()



# Main loop
if __name__=="__main__":
    # First, pars the arguments
    args = arg_parse()
    print('Finding best candidates for {:} using {:}'.format(args.photometery_catalogue.split('/')[-1], args.photometry_file.split('/')[-1]))

    # Now load the photoemtry file, and get the comparison photometry, colnames
    photometry_file = Table.read(args.photometry_file, format='csv')
    photometery_catalogue = Table.read(args.photometery_catalogue)

    flux_columns = []
    for name in photometry_file.colnames : 
        if ('_Aper_flux_3' in name) and not ('_Aper_flux_3_err' in name) : flux_columns.append(name)
    flux_column_target = flux_columns[0]  # keep the target
    flux_columns = np.array(flux_columns[1:])       # remove the target so we can look only at comparison stars
    tic_ids = np.array([i.split('_')[0] for i in flux_columns])

    # Now calcualte the STD / MEDIAN for each comparison star
    STD_MEDIAN = np.zeros(flux_columns.shape[0])
    for i in range(len(flux_columns)) : STD_MEDIAN[i] = np.std(photometry_file[flux_columns[i]]) / np.median(photometry_file[flux_columns[i]])
    STD_MEDIAN_to_clip = np.copy(STD_MEDIAN)

    # Now iteratavily reject comparison stars
    n_reject, i = 1e6 , 1
    while n_reject > 0:
        med_noise = np.median(STD_MEDIAN_to_clip)
        mad_noise = np.median(np.abs(STD_MEDIAN_to_clip-med_noise))
        mask_sig = np.where((STD_MEDIAN_to_clip < med_noise + 4*mad_noise))[0]
        n_reject = len(STD_MEDIAN_to_clip) - len(mask_sig)
        STD_MEDIAN_to_clip = np.copy(STD_MEDIAN_to_clip[mask_sig]) 
        print('\titeration {:<2,} rejected {:<3,} comparisons out of {:<3,}'.format(i, n_reject, STD_MEDIAN.shape[0]))
        i+=1
    mask = np.where(STD_MEDIAN > med_noise + 4*mad_noise)[0]

    # Now plot which ones have been rejected
    x = np.arange(len(STD_MEDIAN))
    f, ax = plt.subplots(nrows=1,ncols=1, figsize=(15,5))
    ax.vlines(x, ymin = np.zeros(x.shape[0]), ymax = STD_MEDIAN, color='k', label='Accepted stars')
    ax.vlines(x[mask], ymin = np.zeros(x.shape[0])[mask], ymax = STD_MEDIAN[mask], color='r', label='Rejected stars')
    ax.set(ylabel=r'$\sigma_{F}$ / $\widetilde{F}$', title='Comparison star rejection\nTarget : {:}\nPhotfile : {:}'.format(flux_column_target.split('_')[0], args.photometry_file), ylim = (0, None))
    ax.set_xticks(x)
    ax.set_xticklabels(tic_ids, rotation = 60, fontsize=4, ha="right")
    plt.legend()
    f.tight_layout()
    f.savefig('{:}/{:}_Comparison_star_rejection.png'.format(args.output_dir, flux_column_target.split('_')[0]), dpi=250)
    plt.close()

    # now write it out for photmerge
    mask_col = np.ones(x.shape[0], dtype = np.bool)
    mask_col[mask] = 0
    mask_table = Table([mask_col], names = ['MASK'])
    mask_table.write('{:}/{:}_mask.fits'.format(args.output_dir, args.photometery_catalogue.split('/')[-1][:-5]), format='fits', overwrite=True)